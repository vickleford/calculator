// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: calculator.proto

package pb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Calculations_FibonacciOf_FullMethodName    = "/calculator.Calculations/FibonacciOf"
	Calculations_GetOperation_FullMethodName   = "/calculator.Calculations/GetOperation"
	Calculations_ListOperations_FullMethodName = "/calculator.Calculations/ListOperations"
	Calculations_WaitOperation_FullMethodName  = "/calculator.Calculations/WaitOperation"
)

// CalculationsClient is the client API for Calculations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationsClient interface {
	// FibonacciOf calculates the number at the Nth position in the sequence.
	FibonacciOf(ctx context.Context, in *FibonacciOfRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// GetOperation returns an operation representing a calculation.
	GetOperation(ctx context.Context, in *longrunningpb.GetOperationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// ListOperations returns all the known operations.
	ListOperations(ctx context.Context, in *longrunningpb.ListOperationsRequest, opts ...grpc.CallOption) (*longrunningpb.ListOperationsResponse, error)
	// WaitOperation waits for the operation to complete up to a timeout. It is
	// best-effort.
	WaitOperation(ctx context.Context, in *longrunningpb.WaitOperationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type calculationsClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationsClient(cc grpc.ClientConnInterface) CalculationsClient {
	return &calculationsClient{cc}
}

func (c *calculationsClient) FibonacciOf(ctx context.Context, in *FibonacciOfRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Calculations_FibonacciOf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) GetOperation(ctx context.Context, in *longrunningpb.GetOperationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Calculations_GetOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) ListOperations(ctx context.Context, in *longrunningpb.ListOperationsRequest, opts ...grpc.CallOption) (*longrunningpb.ListOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.ListOperationsResponse)
	err := c.cc.Invoke(ctx, Calculations_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) WaitOperation(ctx context.Context, in *longrunningpb.WaitOperationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Calculations_WaitOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationsServer is the server API for Calculations service.
// All implementations must embed UnimplementedCalculationsServer
// for forward compatibility
type CalculationsServer interface {
	// FibonacciOf calculates the number at the Nth position in the sequence.
	FibonacciOf(context.Context, *FibonacciOfRequest) (*longrunningpb.Operation, error)
	// GetOperation returns an operation representing a calculation.
	GetOperation(context.Context, *longrunningpb.GetOperationRequest) (*longrunningpb.Operation, error)
	// ListOperations returns all the known operations.
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest) (*longrunningpb.ListOperationsResponse, error)
	// WaitOperation waits for the operation to complete up to a timeout. It is
	// best-effort.
	WaitOperation(context.Context, *longrunningpb.WaitOperationRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedCalculationsServer()
}

// UnimplementedCalculationsServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationsServer struct {
}

func (UnimplementedCalculationsServer) FibonacciOf(context.Context, *FibonacciOfRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FibonacciOf not implemented")
}
func (UnimplementedCalculationsServer) GetOperation(context.Context, *longrunningpb.GetOperationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedCalculationsServer) ListOperations(context.Context, *longrunningpb.ListOperationsRequest) (*longrunningpb.ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedCalculationsServer) WaitOperation(context.Context, *longrunningpb.WaitOperationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitOperation not implemented")
}
func (UnimplementedCalculationsServer) mustEmbedUnimplementedCalculationsServer() {}

// UnsafeCalculationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationsServer will
// result in compilation errors.
type UnsafeCalculationsServer interface {
	mustEmbedUnimplementedCalculationsServer()
}

func RegisterCalculationsServer(s grpc.ServiceRegistrar, srv CalculationsServer) {
	s.RegisterService(&Calculations_ServiceDesc, srv)
}

func _Calculations_FibonacciOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).FibonacciOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculations_FibonacciOf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).FibonacciOf(ctx, req.(*FibonacciOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunningpb.GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculations_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).GetOperation(ctx, req.(*longrunningpb.GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunningpb.ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculations_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).ListOperations(ctx, req.(*longrunningpb.ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_WaitOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(longrunningpb.WaitOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).WaitOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculations_WaitOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).WaitOperation(ctx, req.(*longrunningpb.WaitOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculations_ServiceDesc is the grpc.ServiceDesc for Calculations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculations",
	HandlerType: (*CalculationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FibonacciOf",
			Handler:    _Calculations_FibonacciOf_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _Calculations_GetOperation_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _Calculations_ListOperations_Handler,
		},
		{
			MethodName: "WaitOperation",
			Handler:    _Calculations_WaitOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
